// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateAuthoritiesInitParameters struct {

	// The OCID of the certificate authority resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertificateAuthoritiesObservation struct {

	// The OCID of the certificate authority resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertificateAuthoritiesParameters struct {

	// The OCID of the certificate authority resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type MeshMeshInitParameters struct {

	// The OCID of the certificate authority resource OCID to use for creating leaf certificates.
	CertificateAuthorities []CertificateAuthoritiesInitParameters `json:"certificateAuthorities,omitempty" tf:"certificate_authorities,omitempty"`

	// (Updatable) The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: This is my new resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) A user-friendly name. The name does not have to be unique and can be changed after creation. Avoid entering confidential information.  Example: My new resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Sets a minimum level of mTLS authentication for all virtual services within the mesh.
	Mtls []MeshMeshMtlsInitParameters `json:"mtls,omitempty" tf:"mtls,omitempty"`
}

type MeshMeshMtlsInitParameters struct {

	// (Updatable) DISABLED: No minimum virtual services within this mesh can use any mTLS authentication mode. PERMISSIVE: Virtual services within this mesh can use either PERMISSIVE or STRICT modes. STRICT: All virtual services within this mesh must use STRICT mode.
	Minimum *string `json:"minimum,omitempty" tf:"minimum,omitempty"`
}

type MeshMeshMtlsObservation struct {

	// (Updatable) DISABLED: No minimum virtual services within this mesh can use any mTLS authentication mode. PERMISSIVE: Virtual services within this mesh can use either PERMISSIVE or STRICT modes. STRICT: All virtual services within this mesh must use STRICT mode.
	Minimum *string `json:"minimum,omitempty" tf:"minimum,omitempty"`
}

type MeshMeshMtlsParameters struct {

	// (Updatable) DISABLED: No minimum virtual services within this mesh can use any mTLS authentication mode. PERMISSIVE: Virtual services within this mesh can use either PERMISSIVE or STRICT modes. STRICT: All virtual services within this mesh must use STRICT mode.
	// +kubebuilder:validation:Optional
	Minimum *string `json:"minimum" tf:"minimum,omitempty"`
}

type MeshMeshObservation struct {

	// The OCID of the certificate authority resource OCID to use for creating leaf certificates.
	CertificateAuthorities []CertificateAuthoritiesObservation `json:"certificateAuthorities,omitempty" tf:"certificate_authorities,omitempty"`

	// (Updatable) The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: This is my new resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) A user-friendly name. The name does not have to be unique and can be changed after creation. Avoid entering confidential information.  Example: My new resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The OCID of the certificate authority resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// (Updatable) Sets a minimum level of mTLS authentication for all virtual services within the mesh.
	Mtls []MeshMeshMtlsObservation `json:"mtls,omitempty" tf:"mtls,omitempty"`

	// The current state of the Resource.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: {"orcl-cloud.free-tier-retained": "true"}
	// +mapType=granular
	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	// The time when this resource was created in an RFC3339 formatted datetime string.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The time when this resource was updated in an RFC3339 formatted datetime string.
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type MeshMeshParameters struct {

	// The OCID of the certificate authority resource OCID to use for creating leaf certificates.
	// +kubebuilder:validation:Optional
	CertificateAuthorities []CertificateAuthoritiesParameters `json:"certificateAuthorities,omitempty" tf:"certificate_authorities,omitempty"`

	// (Updatable) The OCID of the compartment.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: This is my new resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) A user-friendly name. The name does not have to be unique and can be changed after creation. Avoid entering confidential information.  Example: My new resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Sets a minimum level of mTLS authentication for all virtual services within the mesh.
	// +kubebuilder:validation:Optional
	Mtls []MeshMeshMtlsParameters `json:"mtls,omitempty" tf:"mtls,omitempty"`
}

// MeshMeshSpec defines the desired state of MeshMesh
type MeshMeshSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MeshMeshParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MeshMeshInitParameters `json:"initProvider,omitempty"`
}

// MeshMeshStatus defines the observed state of MeshMesh.
type MeshMeshStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MeshMeshObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MeshMesh is the Schema for the MeshMeshs API. Provides the Mesh resource in Oracle Cloud Infrastructure Service Mesh service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,provider-oci}
type MeshMesh struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateAuthorities) || (has(self.initProvider) && has(self.initProvider.certificateAuthorities))",message="spec.forProvider.certificateAuthorities is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compartmentId) || (has(self.initProvider) && has(self.initProvider.compartmentId))",message="spec.forProvider.compartmentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	Spec   MeshMeshSpec   `json:"spec"`
	Status MeshMeshStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MeshMeshList contains a list of MeshMeshs
type MeshMeshList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MeshMesh `json:"items"`
}

// Repository type metadata.
var (
	MeshMesh_Kind             = "MeshMesh"
	MeshMesh_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MeshMesh_Kind}.String()
	MeshMesh_KindAPIVersion   = MeshMesh_Kind + "." + CRDGroupVersion.String()
	MeshMesh_GroupVersionKind = CRDGroupVersion.WithKind(MeshMesh_Kind)
)

func init() {
	SchemeBuilder.Register(&MeshMesh{}, &MeshMeshList{})
}
