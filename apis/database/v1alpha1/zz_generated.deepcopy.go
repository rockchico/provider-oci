//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApexDetailsInitParameters) DeepCopyInto(out *ApexDetailsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApexDetailsInitParameters.
func (in *ApexDetailsInitParameters) DeepCopy() *ApexDetailsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ApexDetailsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApexDetailsObservation) DeepCopyInto(out *ApexDetailsObservation) {
	*out = *in
	if in.ApexVersion != nil {
		in, out := &in.ApexVersion, &out.ApexVersion
		*out = new(string)
		**out = **in
	}
	if in.OrdsVersion != nil {
		in, out := &in.OrdsVersion, &out.OrdsVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApexDetailsObservation.
func (in *ApexDetailsObservation) DeepCopy() *ApexDetailsObservation {
	if in == nil {
		return nil
	}
	out := new(ApexDetailsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApexDetailsParameters) DeepCopyInto(out *ApexDetailsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApexDetailsParameters.
func (in *ApexDetailsParameters) DeepCopy() *ApexDetailsParameters {
	if in == nil {
		return nil
	}
	out := new(ApexDetailsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabase) DeepCopyInto(out *AutonomousDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabase.
func (in *AutonomousDatabase) DeepCopy() *AutonomousDatabase {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutonomousDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseInitParameters) DeepCopyInto(out *AutonomousDatabaseInitParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ArePrimaryWhitelistedIpsUsed != nil {
		in, out := &in.ArePrimaryWhitelistedIpsUsed, &out.ArePrimaryWhitelistedIpsUsed
		*out = new(bool)
		**out = **in
	}
	if in.AutoRefreshFrequencyInSeconds != nil {
		in, out := &in.AutoRefreshFrequencyInSeconds, &out.AutoRefreshFrequencyInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutoRefreshPointLagInSeconds != nil {
		in, out := &in.AutoRefreshPointLagInSeconds, &out.AutoRefreshPointLagInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutonomousContainerDatabaseID != nil {
		in, out := &in.AutonomousContainerDatabaseID, &out.AutonomousContainerDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseBackupID != nil {
		in, out := &in.AutonomousDatabaseBackupID, &out.AutonomousDatabaseBackupID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseID != nil {
		in, out := &in.AutonomousDatabaseID, &out.AutonomousDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousMaintenanceScheduleType != nil {
		in, out := &in.AutonomousMaintenanceScheduleType, &out.AutonomousMaintenanceScheduleType
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriodInDays != nil {
		in, out := &in.BackupRetentionPeriodInDays, &out.BackupRetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.ByolComputeCountLimit != nil {
		in, out := &in.ByolComputeCountLimit, &out.ByolComputeCountLimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUCoreCount != nil {
		in, out := &in.CPUCoreCount, &out.CPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.CloneType != nil {
		in, out := &in.CloneType, &out.CloneType
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputeModel != nil {
		in, out := &in.ComputeModel, &out.ComputeModel
		*out = new(string)
		**out = **in
	}
	if in.CustomerContacts != nil {
		in, out := &in.CustomerContacts, &out.CustomerContacts
		*out = make([]CustomerContactsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBToolsDetails != nil {
		in, out := &in.DBToolsDetails, &out.DBToolsDetails
		*out = make([]DBToolsDetailsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DBWorkload != nil {
		in, out := &in.DBWorkload, &out.DBWorkload
		*out = new(string)
		**out = **in
	}
	if in.DataSafeStatus != nil {
		in, out := &in.DataSafeStatus, &out.DataSafeStatus
		*out = new(string)
		**out = **in
	}
	if in.DataStorageSizeInGb != nil {
		in, out := &in.DataStorageSizeInGb, &out.DataStorageSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.DataStorageSizeInTbs != nil {
		in, out := &in.DataStorageSizeInTbs, &out.DataStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.DatabaseEdition != nil {
		in, out := &in.DatabaseEdition, &out.DatabaseEdition
		*out = new(string)
		**out = **in
	}
	if in.DatabaseManagementStatus != nil {
		in, out := &in.DatabaseManagementStatus, &out.DatabaseManagementStatus
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisasterRecoveryType != nil {
		in, out := &in.DisasterRecoveryType, &out.DisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.InMemoryPercentage != nil {
		in, out := &in.InMemoryPercentage, &out.InMemoryPercentage
		*out = new(float64)
		**out = **in
	}
	if in.IsAccessControlEnabled != nil {
		in, out := &in.IsAccessControlEnabled, &out.IsAccessControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingEnabled != nil {
		in, out := &in.IsAutoScalingEnabled, &out.IsAutoScalingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingForStorageEnabled != nil {
		in, out := &in.IsAutoScalingForStorageEnabled, &out.IsAutoScalingForStorageEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDataGuardEnabled != nil {
		in, out := &in.IsDataGuardEnabled, &out.IsDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDedicated != nil {
		in, out := &in.IsDedicated, &out.IsDedicated
		*out = new(bool)
		**out = **in
	}
	if in.IsDevTier != nil {
		in, out := &in.IsDevTier, &out.IsDevTier
		*out = new(bool)
		**out = **in
	}
	if in.IsFreeTier != nil {
		in, out := &in.IsFreeTier, &out.IsFreeTier
		*out = new(bool)
		**out = **in
	}
	if in.IsLocalDataGuardEnabled != nil {
		in, out := &in.IsLocalDataGuardEnabled, &out.IsLocalDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsMtlsConnectionRequired != nil {
		in, out := &in.IsMtlsConnectionRequired, &out.IsMtlsConnectionRequired
		*out = new(bool)
		**out = **in
	}
	if in.IsPreviewVersionWithServiceTermsAccepted != nil {
		in, out := &in.IsPreviewVersionWithServiceTermsAccepted, &out.IsPreviewVersionWithServiceTermsAccepted
		*out = new(bool)
		**out = **in
	}
	if in.IsRefreshableClone != nil {
		in, out := &in.IsRefreshableClone, &out.IsRefreshableClone
		*out = new(bool)
		**out = **in
	}
	if in.IsReplicateAutomaticBackups != nil {
		in, out := &in.IsReplicateAutomaticBackups, &out.IsReplicateAutomaticBackups
		*out = new(bool)
		**out = **in
	}
	if in.IsShrinkOnly != nil {
		in, out := &in.IsShrinkOnly, &out.IsShrinkOnly
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.LocalAdgAutoFailoverMaxDataLossLimit != nil {
		in, out := &in.LocalAdgAutoFailoverMaxDataLossLimit, &out.LocalAdgAutoFailoverMaxDataLossLimit
		*out = new(float64)
		**out = **in
	}
	if in.LongTermBackupSchedule != nil {
		in, out := &in.LongTermBackupSchedule, &out.LongTermBackupSchedule
		*out = make([]LongTermBackupScheduleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxCPUCoreCount != nil {
		in, out := &in.MaxCPUCoreCount, &out.MaxCPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.NcharacterSet != nil {
		in, out := &in.NcharacterSet, &out.NcharacterSet
		*out = new(string)
		**out = **in
	}
	if in.NsgIds != nil {
		in, out := &in.NsgIds, &out.NsgIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OcpuCount != nil {
		in, out := &in.OcpuCount, &out.OcpuCount
		*out = new(float64)
		**out = **in
	}
	if in.OpenMode != nil {
		in, out := &in.OpenMode, &out.OpenMode
		*out = new(string)
		**out = **in
	}
	if in.OperationsInsightsStatus != nil {
		in, out := &in.OperationsInsightsStatus, &out.OperationsInsightsStatus
		*out = new(string)
		**out = **in
	}
	if in.PermissionLevel != nil {
		in, out := &in.PermissionLevel, &out.PermissionLevel
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointIP != nil {
		in, out := &in.PrivateEndpointIP, &out.PrivateEndpointIP
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointLabel != nil {
		in, out := &in.PrivateEndpointLabel, &out.PrivateEndpointLabel
		*out = new(string)
		**out = **in
	}
	if in.RefreshableMode != nil {
		in, out := &in.RefreshableMode, &out.RefreshableMode
		*out = new(string)
		**out = **in
	}
	if in.RemoteDisasterRecoveryType != nil {
		in, out := &in.RemoteDisasterRecoveryType, &out.RemoteDisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolLeaderID != nil {
		in, out := &in.ResourcePoolLeaderID, &out.ResourcePoolLeaderID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolSummary != nil {
		in, out := &in.ResourcePoolSummary, &out.ResourcePoolSummary
		*out = make([]ResourcePoolSummaryInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RotateKeyTrigger != nil {
		in, out := &in.RotateKeyTrigger, &out.RotateKeyTrigger
		*out = new(bool)
		**out = **in
	}
	if in.ScheduledOperations != nil {
		in, out := &in.ScheduledOperations, &out.ScheduledOperations
		*out = make([]ScheduledOperationsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretID != nil {
		in, out := &in.SecretID, &out.SecretID
		*out = new(string)
		**out = **in
	}
	if in.SecretVersionNumber != nil {
		in, out := &in.SecretVersionNumber, &out.SecretVersionNumber
		*out = new(float64)
		**out = **in
	}
	if in.ShrinkAdbTrigger != nil {
		in, out := &in.ShrinkAdbTrigger, &out.ShrinkAdbTrigger
		*out = new(float64)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.SourceID != nil {
		in, out := &in.SourceID, &out.SourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyWhitelistedIps != nil {
		in, out := &in.StandbyWhitelistedIps, &out.StandbyWhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.SwitchoverTo != nil {
		in, out := &in.SwitchoverTo, &out.SwitchoverTo
		*out = new(string)
		**out = **in
	}
	if in.SwitchoverToRemotePeerID != nil {
		in, out := &in.SwitchoverToRemotePeerID, &out.SwitchoverToRemotePeerID
		*out = new(string)
		**out = **in
	}
	if in.TimeOfAutoRefreshStart != nil {
		in, out := &in.TimeOfAutoRefreshStart, &out.TimeOfAutoRefreshStart
		*out = new(string)
		**out = **in
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		*out = new(string)
		**out = **in
	}
	if in.UseLatestAvailableBackupTimeStamp != nil {
		in, out := &in.UseLatestAvailableBackupTimeStamp, &out.UseLatestAvailableBackupTimeStamp
		*out = new(bool)
		**out = **in
	}
	if in.VaultID != nil {
		in, out := &in.VaultID, &out.VaultID
		*out = new(string)
		**out = **in
	}
	if in.WhitelistedIps != nil {
		in, out := &in.WhitelistedIps, &out.WhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseInitParameters.
func (in *AutonomousDatabaseInitParameters) DeepCopy() *AutonomousDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseList) DeepCopyInto(out *AutonomousDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AutonomousDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseList.
func (in *AutonomousDatabaseList) DeepCopy() *AutonomousDatabaseList {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutonomousDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseObservation) DeepCopyInto(out *AutonomousDatabaseObservation) {
	*out = *in
	if in.ActualUsedDataStorageSizeInTbs != nil {
		in, out := &in.ActualUsedDataStorageSizeInTbs, &out.ActualUsedDataStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.AllocatedStorageSizeInTbs != nil {
		in, out := &in.AllocatedStorageSizeInTbs, &out.AllocatedStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.ApexDetails != nil {
		in, out := &in.ApexDetails, &out.ApexDetails
		*out = make([]ApexDetailsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ArePrimaryWhitelistedIpsUsed != nil {
		in, out := &in.ArePrimaryWhitelistedIpsUsed, &out.ArePrimaryWhitelistedIpsUsed
		*out = new(bool)
		**out = **in
	}
	if in.AutoRefreshFrequencyInSeconds != nil {
		in, out := &in.AutoRefreshFrequencyInSeconds, &out.AutoRefreshFrequencyInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutoRefreshPointLagInSeconds != nil {
		in, out := &in.AutoRefreshPointLagInSeconds, &out.AutoRefreshPointLagInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutonomousContainerDatabaseID != nil {
		in, out := &in.AutonomousContainerDatabaseID, &out.AutonomousContainerDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseBackupID != nil {
		in, out := &in.AutonomousDatabaseBackupID, &out.AutonomousDatabaseBackupID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseID != nil {
		in, out := &in.AutonomousDatabaseID, &out.AutonomousDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousMaintenanceScheduleType != nil {
		in, out := &in.AutonomousMaintenanceScheduleType, &out.AutonomousMaintenanceScheduleType
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityDomain != nil {
		in, out := &in.AvailabilityDomain, &out.AvailabilityDomain
		*out = new(string)
		**out = **in
	}
	if in.AvailableUpgradeVersions != nil {
		in, out := &in.AvailableUpgradeVersions, &out.AvailableUpgradeVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BackupConfig != nil {
		in, out := &in.BackupConfig, &out.BackupConfig
		*out = make([]BackupConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupRetentionPeriodInDays != nil {
		in, out := &in.BackupRetentionPeriodInDays, &out.BackupRetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.ByolComputeCountLimit != nil {
		in, out := &in.ByolComputeCountLimit, &out.ByolComputeCountLimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUCoreCount != nil {
		in, out := &in.CPUCoreCount, &out.CPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.CloneType != nil {
		in, out := &in.CloneType, &out.CloneType
		*out = new(string)
		**out = **in
	}
	if in.ClusterPlacementGroupID != nil {
		in, out := &in.ClusterPlacementGroupID, &out.ClusterPlacementGroupID
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputeModel != nil {
		in, out := &in.ComputeModel, &out.ComputeModel
		*out = new(string)
		**out = **in
	}
	if in.ConnectionStrings != nil {
		in, out := &in.ConnectionStrings, &out.ConnectionStrings
		*out = make([]ConnectionStringsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectionUrls != nil {
		in, out := &in.ConnectionUrls, &out.ConnectionUrls
		*out = make([]ConnectionUrlsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CustomerContacts != nil {
		in, out := &in.CustomerContacts, &out.CustomerContacts
		*out = make([]CustomerContactsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBToolsDetails != nil {
		in, out := &in.DBToolsDetails, &out.DBToolsDetails
		*out = make([]DBToolsDetailsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DBWorkload != nil {
		in, out := &in.DBWorkload, &out.DBWorkload
		*out = new(string)
		**out = **in
	}
	if in.DataSafeStatus != nil {
		in, out := &in.DataSafeStatus, &out.DataSafeStatus
		*out = new(string)
		**out = **in
	}
	if in.DataStorageSizeInGb != nil {
		in, out := &in.DataStorageSizeInGb, &out.DataStorageSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.DataStorageSizeInTbs != nil {
		in, out := &in.DataStorageSizeInTbs, &out.DataStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.DatabaseEdition != nil {
		in, out := &in.DatabaseEdition, &out.DatabaseEdition
		*out = new(string)
		**out = **in
	}
	if in.DatabaseManagementStatus != nil {
		in, out := &in.DatabaseManagementStatus, &out.DatabaseManagementStatus
		*out = new(string)
		**out = **in
	}
	if in.DataguardRegionType != nil {
		in, out := &in.DataguardRegionType, &out.DataguardRegionType
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisasterRecoveryRegionType != nil {
		in, out := &in.DisasterRecoveryRegionType, &out.DisasterRecoveryRegionType
		*out = new(string)
		**out = **in
	}
	if in.DisasterRecoveryType != nil {
		in, out := &in.DisasterRecoveryType, &out.DisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FailedDataRecoveryInSeconds != nil {
		in, out := &in.FailedDataRecoveryInSeconds, &out.FailedDataRecoveryInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InMemoryAreaInGbs != nil {
		in, out := &in.InMemoryAreaInGbs, &out.InMemoryAreaInGbs
		*out = new(float64)
		**out = **in
	}
	if in.InMemoryPercentage != nil {
		in, out := &in.InMemoryPercentage, &out.InMemoryPercentage
		*out = new(float64)
		**out = **in
	}
	if in.InfrastructureType != nil {
		in, out := &in.InfrastructureType, &out.InfrastructureType
		*out = new(string)
		**out = **in
	}
	if in.IsAccessControlEnabled != nil {
		in, out := &in.IsAccessControlEnabled, &out.IsAccessControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingEnabled != nil {
		in, out := &in.IsAutoScalingEnabled, &out.IsAutoScalingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingForStorageEnabled != nil {
		in, out := &in.IsAutoScalingForStorageEnabled, &out.IsAutoScalingForStorageEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDataGuardEnabled != nil {
		in, out := &in.IsDataGuardEnabled, &out.IsDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDedicated != nil {
		in, out := &in.IsDedicated, &out.IsDedicated
		*out = new(bool)
		**out = **in
	}
	if in.IsDevTier != nil {
		in, out := &in.IsDevTier, &out.IsDevTier
		*out = new(bool)
		**out = **in
	}
	if in.IsFreeTier != nil {
		in, out := &in.IsFreeTier, &out.IsFreeTier
		*out = new(bool)
		**out = **in
	}
	if in.IsLocalDataGuardEnabled != nil {
		in, out := &in.IsLocalDataGuardEnabled, &out.IsLocalDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsMtlsConnectionRequired != nil {
		in, out := &in.IsMtlsConnectionRequired, &out.IsMtlsConnectionRequired
		*out = new(bool)
		**out = **in
	}
	if in.IsPreview != nil {
		in, out := &in.IsPreview, &out.IsPreview
		*out = new(bool)
		**out = **in
	}
	if in.IsPreviewVersionWithServiceTermsAccepted != nil {
		in, out := &in.IsPreviewVersionWithServiceTermsAccepted, &out.IsPreviewVersionWithServiceTermsAccepted
		*out = new(bool)
		**out = **in
	}
	if in.IsReconnectCloneEnabled != nil {
		in, out := &in.IsReconnectCloneEnabled, &out.IsReconnectCloneEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsRefreshableClone != nil {
		in, out := &in.IsRefreshableClone, &out.IsRefreshableClone
		*out = new(bool)
		**out = **in
	}
	if in.IsRemoteDataGuardEnabled != nil {
		in, out := &in.IsRemoteDataGuardEnabled, &out.IsRemoteDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsReplicateAutomaticBackups != nil {
		in, out := &in.IsReplicateAutomaticBackups, &out.IsReplicateAutomaticBackups
		*out = new(bool)
		**out = **in
	}
	if in.IsShrinkOnly != nil {
		in, out := &in.IsShrinkOnly, &out.IsShrinkOnly
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyLifecycleDetails != nil {
		in, out := &in.KMSKeyLifecycleDetails, &out.KMSKeyLifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyVersionID != nil {
		in, out := &in.KMSKeyVersionID, &out.KMSKeyVersionID
		*out = new(string)
		**out = **in
	}
	if in.KeyHistoryEntry != nil {
		in, out := &in.KeyHistoryEntry, &out.KeyHistoryEntry
		*out = make([]KeyHistoryEntryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeyStoreID != nil {
		in, out := &in.KeyStoreID, &out.KeyStoreID
		*out = new(string)
		**out = **in
	}
	if in.KeyStoreWalletName != nil {
		in, out := &in.KeyStoreWalletName, &out.KeyStoreWalletName
		*out = new(string)
		**out = **in
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.LocalAdgAutoFailoverMaxDataLossLimit != nil {
		in, out := &in.LocalAdgAutoFailoverMaxDataLossLimit, &out.LocalAdgAutoFailoverMaxDataLossLimit
		*out = new(float64)
		**out = **in
	}
	if in.LocalDisasterRecoveryType != nil {
		in, out := &in.LocalDisasterRecoveryType, &out.LocalDisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.LocalStandbyDB != nil {
		in, out := &in.LocalStandbyDB, &out.LocalStandbyDB
		*out = make([]LocalStandbyDBObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LongTermBackupSchedule != nil {
		in, out := &in.LongTermBackupSchedule, &out.LongTermBackupSchedule
		*out = make([]LongTermBackupScheduleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxCPUCoreCount != nil {
		in, out := &in.MaxCPUCoreCount, &out.MaxCPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.MemoryPerOracleComputeUnitInGbs != nil {
		in, out := &in.MemoryPerOracleComputeUnitInGbs, &out.MemoryPerOracleComputeUnitInGbs
		*out = new(float64)
		**out = **in
	}
	if in.NcharacterSet != nil {
		in, out := &in.NcharacterSet, &out.NcharacterSet
		*out = new(string)
		**out = **in
	}
	if in.NetServicesArchitecture != nil {
		in, out := &in.NetServicesArchitecture, &out.NetServicesArchitecture
		*out = new(string)
		**out = **in
	}
	if in.NextLongTermBackupTimeStamp != nil {
		in, out := &in.NextLongTermBackupTimeStamp, &out.NextLongTermBackupTimeStamp
		*out = new(string)
		**out = **in
	}
	if in.NsgIds != nil {
		in, out := &in.NsgIds, &out.NsgIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OcpuCount != nil {
		in, out := &in.OcpuCount, &out.OcpuCount
		*out = new(float64)
		**out = **in
	}
	if in.OpenMode != nil {
		in, out := &in.OpenMode, &out.OpenMode
		*out = new(string)
		**out = **in
	}
	if in.OperationsInsightsStatus != nil {
		in, out := &in.OperationsInsightsStatus, &out.OperationsInsightsStatus
		*out = new(string)
		**out = **in
	}
	if in.PeerDBIds != nil {
		in, out := &in.PeerDBIds, &out.PeerDBIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PermissionLevel != nil {
		in, out := &in.PermissionLevel, &out.PermissionLevel
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpoint != nil {
		in, out := &in.PrivateEndpoint, &out.PrivateEndpoint
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointIP != nil {
		in, out := &in.PrivateEndpointIP, &out.PrivateEndpointIP
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointLabel != nil {
		in, out := &in.PrivateEndpointLabel, &out.PrivateEndpointLabel
		*out = new(string)
		**out = **in
	}
	if in.ProvisionableCpus != nil {
		in, out := &in.ProvisionableCpus, &out.ProvisionableCpus
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.PublicConnectionUrls != nil {
		in, out := &in.PublicConnectionUrls, &out.PublicConnectionUrls
		*out = make([]PublicConnectionUrlsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicEndpoint != nil {
		in, out := &in.PublicEndpoint, &out.PublicEndpoint
		*out = new(string)
		**out = **in
	}
	if in.RefreshableMode != nil {
		in, out := &in.RefreshableMode, &out.RefreshableMode
		*out = new(string)
		**out = **in
	}
	if in.RefreshableStatus != nil {
		in, out := &in.RefreshableStatus, &out.RefreshableStatus
		*out = new(string)
		**out = **in
	}
	if in.RemoteDisasterRecoveryConfiguration != nil {
		in, out := &in.RemoteDisasterRecoveryConfiguration, &out.RemoteDisasterRecoveryConfiguration
		*out = make([]RemoteDisasterRecoveryConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RemoteDisasterRecoveryType != nil {
		in, out := &in.RemoteDisasterRecoveryType, &out.RemoteDisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolLeaderID != nil {
		in, out := &in.ResourcePoolLeaderID, &out.ResourcePoolLeaderID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolSummary != nil {
		in, out := &in.ResourcePoolSummary, &out.ResourcePoolSummary
		*out = make([]ResourcePoolSummaryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.RotateKeyTrigger != nil {
		in, out := &in.RotateKeyTrigger, &out.RotateKeyTrigger
		*out = new(bool)
		**out = **in
	}
	if in.ScheduledOperations != nil {
		in, out := &in.ScheduledOperations, &out.ScheduledOperations
		*out = make([]ScheduledOperationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretID != nil {
		in, out := &in.SecretID, &out.SecretID
		*out = new(string)
		**out = **in
	}
	if in.SecretVersionNumber != nil {
		in, out := &in.SecretVersionNumber, &out.SecretVersionNumber
		*out = new(float64)
		**out = **in
	}
	if in.ServiceConsoleURL != nil {
		in, out := &in.ServiceConsoleURL, &out.ServiceConsoleURL
		*out = new(string)
		**out = **in
	}
	if in.ShrinkAdbTrigger != nil {
		in, out := &in.ShrinkAdbTrigger, &out.ShrinkAdbTrigger
		*out = new(float64)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.SourceID != nil {
		in, out := &in.SourceID, &out.SourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyDB != nil {
		in, out := &in.StandbyDB, &out.StandbyDB
		*out = make([]StandbyDBObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StandbyWhitelistedIps != nil {
		in, out := &in.StandbyWhitelistedIps, &out.StandbyWhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.SupportedRegionsToCloneTo != nil {
		in, out := &in.SupportedRegionsToCloneTo, &out.SupportedRegionsToCloneTo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SwitchoverTo != nil {
		in, out := &in.SwitchoverTo, &out.SwitchoverTo
		*out = new(string)
		**out = **in
	}
	if in.SwitchoverToRemotePeerID != nil {
		in, out := &in.SwitchoverToRemotePeerID, &out.SwitchoverToRemotePeerID
		*out = new(string)
		**out = **in
	}
	if in.SystemTags != nil {
		in, out := &in.SystemTags, &out.SystemTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeDataGuardRoleChanged != nil {
		in, out := &in.TimeDataGuardRoleChanged, &out.TimeDataGuardRoleChanged
		*out = new(string)
		**out = **in
	}
	if in.TimeDeletionOfFreeAutonomousDatabase != nil {
		in, out := &in.TimeDeletionOfFreeAutonomousDatabase, &out.TimeDeletionOfFreeAutonomousDatabase
		*out = new(string)
		**out = **in
	}
	if in.TimeDisasterRecoveryRoleChanged != nil {
		in, out := &in.TimeDisasterRecoveryRoleChanged, &out.TimeDisasterRecoveryRoleChanged
		*out = new(string)
		**out = **in
	}
	if in.TimeLocalDataGuardEnabled != nil {
		in, out := &in.TimeLocalDataGuardEnabled, &out.TimeLocalDataGuardEnabled
		*out = new(string)
		**out = **in
	}
	if in.TimeMaintenanceBegin != nil {
		in, out := &in.TimeMaintenanceBegin, &out.TimeMaintenanceBegin
		*out = new(string)
		**out = **in
	}
	if in.TimeMaintenanceEnd != nil {
		in, out := &in.TimeMaintenanceEnd, &out.TimeMaintenanceEnd
		*out = new(string)
		**out = **in
	}
	if in.TimeOfAutoRefreshStart != nil {
		in, out := &in.TimeOfAutoRefreshStart, &out.TimeOfAutoRefreshStart
		*out = new(string)
		**out = **in
	}
	if in.TimeOfJoiningResourcePool != nil {
		in, out := &in.TimeOfJoiningResourcePool, &out.TimeOfJoiningResourcePool
		*out = new(string)
		**out = **in
	}
	if in.TimeOfLastFailover != nil {
		in, out := &in.TimeOfLastFailover, &out.TimeOfLastFailover
		*out = new(string)
		**out = **in
	}
	if in.TimeOfLastRefresh != nil {
		in, out := &in.TimeOfLastRefresh, &out.TimeOfLastRefresh
		*out = new(string)
		**out = **in
	}
	if in.TimeOfLastRefreshPoint != nil {
		in, out := &in.TimeOfLastRefreshPoint, &out.TimeOfLastRefreshPoint
		*out = new(string)
		**out = **in
	}
	if in.TimeOfLastSwitchover != nil {
		in, out := &in.TimeOfLastSwitchover, &out.TimeOfLastSwitchover
		*out = new(string)
		**out = **in
	}
	if in.TimeOfNextRefresh != nil {
		in, out := &in.TimeOfNextRefresh, &out.TimeOfNextRefresh
		*out = new(string)
		**out = **in
	}
	if in.TimeReclamationOfFreeAutonomousDatabase != nil {
		in, out := &in.TimeReclamationOfFreeAutonomousDatabase, &out.TimeReclamationOfFreeAutonomousDatabase
		*out = new(string)
		**out = **in
	}
	if in.TimeUntilReconnectCloneEnabled != nil {
		in, out := &in.TimeUntilReconnectCloneEnabled, &out.TimeUntilReconnectCloneEnabled
		*out = new(string)
		**out = **in
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		*out = new(string)
		**out = **in
	}
	if in.TotalBackupStorageSizeInGbs != nil {
		in, out := &in.TotalBackupStorageSizeInGbs, &out.TotalBackupStorageSizeInGbs
		*out = new(float64)
		**out = **in
	}
	if in.UseLatestAvailableBackupTimeStamp != nil {
		in, out := &in.UseLatestAvailableBackupTimeStamp, &out.UseLatestAvailableBackupTimeStamp
		*out = new(bool)
		**out = **in
	}
	if in.UsedDataStorageSizeInGbs != nil {
		in, out := &in.UsedDataStorageSizeInGbs, &out.UsedDataStorageSizeInGbs
		*out = new(float64)
		**out = **in
	}
	if in.UsedDataStorageSizeInTbs != nil {
		in, out := &in.UsedDataStorageSizeInTbs, &out.UsedDataStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.VaultID != nil {
		in, out := &in.VaultID, &out.VaultID
		*out = new(string)
		**out = **in
	}
	if in.WhitelistedIps != nil {
		in, out := &in.WhitelistedIps, &out.WhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseObservation.
func (in *AutonomousDatabaseObservation) DeepCopy() *AutonomousDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseParameters) DeepCopyInto(out *AutonomousDatabaseParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ArePrimaryWhitelistedIpsUsed != nil {
		in, out := &in.ArePrimaryWhitelistedIpsUsed, &out.ArePrimaryWhitelistedIpsUsed
		*out = new(bool)
		**out = **in
	}
	if in.AutoRefreshFrequencyInSeconds != nil {
		in, out := &in.AutoRefreshFrequencyInSeconds, &out.AutoRefreshFrequencyInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutoRefreshPointLagInSeconds != nil {
		in, out := &in.AutoRefreshPointLagInSeconds, &out.AutoRefreshPointLagInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.AutonomousContainerDatabaseID != nil {
		in, out := &in.AutonomousContainerDatabaseID, &out.AutonomousContainerDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseBackupID != nil {
		in, out := &in.AutonomousDatabaseBackupID, &out.AutonomousDatabaseBackupID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousDatabaseID != nil {
		in, out := &in.AutonomousDatabaseID, &out.AutonomousDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.AutonomousMaintenanceScheduleType != nil {
		in, out := &in.AutonomousMaintenanceScheduleType, &out.AutonomousMaintenanceScheduleType
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriodInDays != nil {
		in, out := &in.BackupRetentionPeriodInDays, &out.BackupRetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.ByolComputeCountLimit != nil {
		in, out := &in.ByolComputeCountLimit, &out.ByolComputeCountLimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUCoreCount != nil {
		in, out := &in.CPUCoreCount, &out.CPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.CloneType != nil {
		in, out := &in.CloneType, &out.CloneType
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputeModel != nil {
		in, out := &in.ComputeModel, &out.ComputeModel
		*out = new(string)
		**out = **in
	}
	if in.CustomerContacts != nil {
		in, out := &in.CustomerContacts, &out.CustomerContacts
		*out = make([]CustomerContactsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBToolsDetails != nil {
		in, out := &in.DBToolsDetails, &out.DBToolsDetails
		*out = make([]DBToolsDetailsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DBWorkload != nil {
		in, out := &in.DBWorkload, &out.DBWorkload
		*out = new(string)
		**out = **in
	}
	if in.DataSafeStatus != nil {
		in, out := &in.DataSafeStatus, &out.DataSafeStatus
		*out = new(string)
		**out = **in
	}
	if in.DataStorageSizeInGb != nil {
		in, out := &in.DataStorageSizeInGb, &out.DataStorageSizeInGb
		*out = new(float64)
		**out = **in
	}
	if in.DataStorageSizeInTbs != nil {
		in, out := &in.DataStorageSizeInTbs, &out.DataStorageSizeInTbs
		*out = new(float64)
		**out = **in
	}
	if in.DatabaseEdition != nil {
		in, out := &in.DatabaseEdition, &out.DatabaseEdition
		*out = new(string)
		**out = **in
	}
	if in.DatabaseManagementStatus != nil {
		in, out := &in.DatabaseManagementStatus, &out.DatabaseManagementStatus
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisasterRecoveryType != nil {
		in, out := &in.DisasterRecoveryType, &out.DisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.InMemoryPercentage != nil {
		in, out := &in.InMemoryPercentage, &out.InMemoryPercentage
		*out = new(float64)
		**out = **in
	}
	if in.IsAccessControlEnabled != nil {
		in, out := &in.IsAccessControlEnabled, &out.IsAccessControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingEnabled != nil {
		in, out := &in.IsAutoScalingEnabled, &out.IsAutoScalingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoScalingForStorageEnabled != nil {
		in, out := &in.IsAutoScalingForStorageEnabled, &out.IsAutoScalingForStorageEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDataGuardEnabled != nil {
		in, out := &in.IsDataGuardEnabled, &out.IsDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsDedicated != nil {
		in, out := &in.IsDedicated, &out.IsDedicated
		*out = new(bool)
		**out = **in
	}
	if in.IsDevTier != nil {
		in, out := &in.IsDevTier, &out.IsDevTier
		*out = new(bool)
		**out = **in
	}
	if in.IsFreeTier != nil {
		in, out := &in.IsFreeTier, &out.IsFreeTier
		*out = new(bool)
		**out = **in
	}
	if in.IsLocalDataGuardEnabled != nil {
		in, out := &in.IsLocalDataGuardEnabled, &out.IsLocalDataGuardEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsMtlsConnectionRequired != nil {
		in, out := &in.IsMtlsConnectionRequired, &out.IsMtlsConnectionRequired
		*out = new(bool)
		**out = **in
	}
	if in.IsPreviewVersionWithServiceTermsAccepted != nil {
		in, out := &in.IsPreviewVersionWithServiceTermsAccepted, &out.IsPreviewVersionWithServiceTermsAccepted
		*out = new(bool)
		**out = **in
	}
	if in.IsRefreshableClone != nil {
		in, out := &in.IsRefreshableClone, &out.IsRefreshableClone
		*out = new(bool)
		**out = **in
	}
	if in.IsReplicateAutomaticBackups != nil {
		in, out := &in.IsReplicateAutomaticBackups, &out.IsReplicateAutomaticBackups
		*out = new(bool)
		**out = **in
	}
	if in.IsShrinkOnly != nil {
		in, out := &in.IsShrinkOnly, &out.IsShrinkOnly
		*out = new(bool)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.LocalAdgAutoFailoverMaxDataLossLimit != nil {
		in, out := &in.LocalAdgAutoFailoverMaxDataLossLimit, &out.LocalAdgAutoFailoverMaxDataLossLimit
		*out = new(float64)
		**out = **in
	}
	if in.LongTermBackupSchedule != nil {
		in, out := &in.LongTermBackupSchedule, &out.LongTermBackupSchedule
		*out = make([]LongTermBackupScheduleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxCPUCoreCount != nil {
		in, out := &in.MaxCPUCoreCount, &out.MaxCPUCoreCount
		*out = new(float64)
		**out = **in
	}
	if in.NcharacterSet != nil {
		in, out := &in.NcharacterSet, &out.NcharacterSet
		*out = new(string)
		**out = **in
	}
	if in.NsgIds != nil {
		in, out := &in.NsgIds, &out.NsgIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OcpuCount != nil {
		in, out := &in.OcpuCount, &out.OcpuCount
		*out = new(float64)
		**out = **in
	}
	if in.OpenMode != nil {
		in, out := &in.OpenMode, &out.OpenMode
		*out = new(string)
		**out = **in
	}
	if in.OperationsInsightsStatus != nil {
		in, out := &in.OperationsInsightsStatus, &out.OperationsInsightsStatus
		*out = new(string)
		**out = **in
	}
	if in.PermissionLevel != nil {
		in, out := &in.PermissionLevel, &out.PermissionLevel
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointIP != nil {
		in, out := &in.PrivateEndpointIP, &out.PrivateEndpointIP
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointLabel != nil {
		in, out := &in.PrivateEndpointLabel, &out.PrivateEndpointLabel
		*out = new(string)
		**out = **in
	}
	if in.RefreshableMode != nil {
		in, out := &in.RefreshableMode, &out.RefreshableMode
		*out = new(string)
		**out = **in
	}
	if in.RemoteDisasterRecoveryType != nil {
		in, out := &in.RemoteDisasterRecoveryType, &out.RemoteDisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolLeaderID != nil {
		in, out := &in.ResourcePoolLeaderID, &out.ResourcePoolLeaderID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolSummary != nil {
		in, out := &in.ResourcePoolSummary, &out.ResourcePoolSummary
		*out = make([]ResourcePoolSummaryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RotateKeyTrigger != nil {
		in, out := &in.RotateKeyTrigger, &out.RotateKeyTrigger
		*out = new(bool)
		**out = **in
	}
	if in.ScheduledOperations != nil {
		in, out := &in.ScheduledOperations, &out.ScheduledOperations
		*out = make([]ScheduledOperationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretID != nil {
		in, out := &in.SecretID, &out.SecretID
		*out = new(string)
		**out = **in
	}
	if in.SecretVersionNumber != nil {
		in, out := &in.SecretVersionNumber, &out.SecretVersionNumber
		*out = new(float64)
		**out = **in
	}
	if in.ShrinkAdbTrigger != nil {
		in, out := &in.ShrinkAdbTrigger, &out.ShrinkAdbTrigger
		*out = new(float64)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.SourceID != nil {
		in, out := &in.SourceID, &out.SourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyWhitelistedIps != nil {
		in, out := &in.StandbyWhitelistedIps, &out.StandbyWhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.SwitchoverTo != nil {
		in, out := &in.SwitchoverTo, &out.SwitchoverTo
		*out = new(string)
		**out = **in
	}
	if in.SwitchoverToRemotePeerID != nil {
		in, out := &in.SwitchoverToRemotePeerID, &out.SwitchoverToRemotePeerID
		*out = new(string)
		**out = **in
	}
	if in.TimeOfAutoRefreshStart != nil {
		in, out := &in.TimeOfAutoRefreshStart, &out.TimeOfAutoRefreshStart
		*out = new(string)
		**out = **in
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		*out = new(string)
		**out = **in
	}
	if in.UseLatestAvailableBackupTimeStamp != nil {
		in, out := &in.UseLatestAvailableBackupTimeStamp, &out.UseLatestAvailableBackupTimeStamp
		*out = new(bool)
		**out = **in
	}
	if in.VaultID != nil {
		in, out := &in.VaultID, &out.VaultID
		*out = new(string)
		**out = **in
	}
	if in.WhitelistedIps != nil {
		in, out := &in.WhitelistedIps, &out.WhitelistedIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseParameters.
func (in *AutonomousDatabaseParameters) DeepCopy() *AutonomousDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseSpec) DeepCopyInto(out *AutonomousDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseSpec.
func (in *AutonomousDatabaseSpec) DeepCopy() *AutonomousDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutonomousDatabaseStatus) DeepCopyInto(out *AutonomousDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutonomousDatabaseStatus.
func (in *AutonomousDatabaseStatus) DeepCopy() *AutonomousDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(AutonomousDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigInitParameters) DeepCopyInto(out *BackupConfigInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigInitParameters.
func (in *BackupConfigInitParameters) DeepCopy() *BackupConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigObservation) DeepCopyInto(out *BackupConfigObservation) {
	*out = *in
	if in.ManualBackupBucketName != nil {
		in, out := &in.ManualBackupBucketName, &out.ManualBackupBucketName
		*out = new(string)
		**out = **in
	}
	if in.ManualBackupType != nil {
		in, out := &in.ManualBackupType, &out.ManualBackupType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigObservation.
func (in *BackupConfigObservation) DeepCopy() *BackupConfigObservation {
	if in == nil {
		return nil
	}
	out := new(BackupConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupConfigParameters) DeepCopyInto(out *BackupConfigParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupConfigParameters.
func (in *BackupConfigParameters) DeepCopy() *BackupConfigParameters {
	if in == nil {
		return nil
	}
	out := new(BackupConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionStringsInitParameters) DeepCopyInto(out *ConnectionStringsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionStringsInitParameters.
func (in *ConnectionStringsInitParameters) DeepCopy() *ConnectionStringsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionStringsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionStringsObservation) DeepCopyInto(out *ConnectionStringsObservation) {
	*out = *in
	if in.AllConnectionStrings != nil {
		in, out := &in.AllConnectionStrings, &out.AllConnectionStrings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Dedicated != nil {
		in, out := &in.Dedicated, &out.Dedicated
		*out = new(string)
		**out = **in
	}
	if in.High != nil {
		in, out := &in.High, &out.High
		*out = new(string)
		**out = **in
	}
	if in.Low != nil {
		in, out := &in.Low, &out.Low
		*out = new(string)
		**out = **in
	}
	if in.Medium != nil {
		in, out := &in.Medium, &out.Medium
		*out = new(string)
		**out = **in
	}
	if in.Profiles != nil {
		in, out := &in.Profiles, &out.Profiles
		*out = make([]ProfilesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionStringsObservation.
func (in *ConnectionStringsObservation) DeepCopy() *ConnectionStringsObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectionStringsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionStringsParameters) DeepCopyInto(out *ConnectionStringsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionStringsParameters.
func (in *ConnectionStringsParameters) DeepCopy() *ConnectionStringsParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionStringsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionUrlsInitParameters) DeepCopyInto(out *ConnectionUrlsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionUrlsInitParameters.
func (in *ConnectionUrlsInitParameters) DeepCopy() *ConnectionUrlsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionUrlsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionUrlsObservation) DeepCopyInto(out *ConnectionUrlsObservation) {
	*out = *in
	if in.ApexURL != nil {
		in, out := &in.ApexURL, &out.ApexURL
		*out = new(string)
		**out = **in
	}
	if in.DatabaseTransformsURL != nil {
		in, out := &in.DatabaseTransformsURL, &out.DatabaseTransformsURL
		*out = new(string)
		**out = **in
	}
	if in.GraphStudioURL != nil {
		in, out := &in.GraphStudioURL, &out.GraphStudioURL
		*out = new(string)
		**out = **in
	}
	if in.MachineLearningNotebookURL != nil {
		in, out := &in.MachineLearningNotebookURL, &out.MachineLearningNotebookURL
		*out = new(string)
		**out = **in
	}
	if in.MachineLearningUserManagementURL != nil {
		in, out := &in.MachineLearningUserManagementURL, &out.MachineLearningUserManagementURL
		*out = new(string)
		**out = **in
	}
	if in.MongoDBURL != nil {
		in, out := &in.MongoDBURL, &out.MongoDBURL
		*out = new(string)
		**out = **in
	}
	if in.OrdsURL != nil {
		in, out := &in.OrdsURL, &out.OrdsURL
		*out = new(string)
		**out = **in
	}
	if in.SQLDevWebURL != nil {
		in, out := &in.SQLDevWebURL, &out.SQLDevWebURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionUrlsObservation.
func (in *ConnectionUrlsObservation) DeepCopy() *ConnectionUrlsObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectionUrlsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionUrlsParameters) DeepCopyInto(out *ConnectionUrlsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionUrlsParameters.
func (in *ConnectionUrlsParameters) DeepCopy() *ConnectionUrlsParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionUrlsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerContactsInitParameters) DeepCopyInto(out *CustomerContactsInitParameters) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerContactsInitParameters.
func (in *CustomerContactsInitParameters) DeepCopy() *CustomerContactsInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomerContactsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerContactsObservation) DeepCopyInto(out *CustomerContactsObservation) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerContactsObservation.
func (in *CustomerContactsObservation) DeepCopy() *CustomerContactsObservation {
	if in == nil {
		return nil
	}
	out := new(CustomerContactsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerContactsParameters) DeepCopyInto(out *CustomerContactsParameters) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerContactsParameters.
func (in *CustomerContactsParameters) DeepCopy() *CustomerContactsParameters {
	if in == nil {
		return nil
	}
	out := new(CustomerContactsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBToolsDetailsInitParameters) DeepCopyInto(out *DBToolsDetailsInitParameters) {
	*out = *in
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxIdleTimeInMinutes != nil {
		in, out := &in.MaxIdleTimeInMinutes, &out.MaxIdleTimeInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBToolsDetailsInitParameters.
func (in *DBToolsDetailsInitParameters) DeepCopy() *DBToolsDetailsInitParameters {
	if in == nil {
		return nil
	}
	out := new(DBToolsDetailsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBToolsDetailsObservation) DeepCopyInto(out *DBToolsDetailsObservation) {
	*out = *in
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxIdleTimeInMinutes != nil {
		in, out := &in.MaxIdleTimeInMinutes, &out.MaxIdleTimeInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBToolsDetailsObservation.
func (in *DBToolsDetailsObservation) DeepCopy() *DBToolsDetailsObservation {
	if in == nil {
		return nil
	}
	out := new(DBToolsDetailsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBToolsDetailsParameters) DeepCopyInto(out *DBToolsDetailsParameters) {
	*out = *in
	if in.ComputeCount != nil {
		in, out := &in.ComputeCount, &out.ComputeCount
		*out = new(float64)
		**out = **in
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxIdleTimeInMinutes != nil {
		in, out := &in.MaxIdleTimeInMinutes, &out.MaxIdleTimeInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBToolsDetailsParameters.
func (in *DBToolsDetailsParameters) DeepCopy() *DBToolsDetailsParameters {
	if in == nil {
		return nil
	}
	out := new(DBToolsDetailsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DayOfWeekInitParameters) DeepCopyInto(out *DayOfWeekInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DayOfWeekInitParameters.
func (in *DayOfWeekInitParameters) DeepCopy() *DayOfWeekInitParameters {
	if in == nil {
		return nil
	}
	out := new(DayOfWeekInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DayOfWeekObservation) DeepCopyInto(out *DayOfWeekObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DayOfWeekObservation.
func (in *DayOfWeekObservation) DeepCopy() *DayOfWeekObservation {
	if in == nil {
		return nil
	}
	out := new(DayOfWeekObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DayOfWeekParameters) DeepCopyInto(out *DayOfWeekParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DayOfWeekParameters.
func (in *DayOfWeekParameters) DeepCopy() *DayOfWeekParameters {
	if in == nil {
		return nil
	}
	out := new(DayOfWeekParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeyHistoryEntryInitParameters) DeepCopyInto(out *KeyHistoryEntryInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeyHistoryEntryInitParameters.
func (in *KeyHistoryEntryInitParameters) DeepCopy() *KeyHistoryEntryInitParameters {
	if in == nil {
		return nil
	}
	out := new(KeyHistoryEntryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeyHistoryEntryObservation) DeepCopyInto(out *KeyHistoryEntryObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyVersionID != nil {
		in, out := &in.KMSKeyVersionID, &out.KMSKeyVersionID
		*out = new(string)
		**out = **in
	}
	if in.TimeActivated != nil {
		in, out := &in.TimeActivated, &out.TimeActivated
		*out = new(string)
		**out = **in
	}
	if in.VaultID != nil {
		in, out := &in.VaultID, &out.VaultID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeyHistoryEntryObservation.
func (in *KeyHistoryEntryObservation) DeepCopy() *KeyHistoryEntryObservation {
	if in == nil {
		return nil
	}
	out := new(KeyHistoryEntryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeyHistoryEntryParameters) DeepCopyInto(out *KeyHistoryEntryParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeyHistoryEntryParameters.
func (in *KeyHistoryEntryParameters) DeepCopy() *KeyHistoryEntryParameters {
	if in == nil {
		return nil
	}
	out := new(KeyHistoryEntryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalStandbyDBInitParameters) DeepCopyInto(out *LocalStandbyDBInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalStandbyDBInitParameters.
func (in *LocalStandbyDBInitParameters) DeepCopy() *LocalStandbyDBInitParameters {
	if in == nil {
		return nil
	}
	out := new(LocalStandbyDBInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalStandbyDBObservation) DeepCopyInto(out *LocalStandbyDBObservation) {
	*out = *in
	if in.AvailabilityDomain != nil {
		in, out := &in.AvailabilityDomain, &out.AvailabilityDomain
		*out = new(string)
		**out = **in
	}
	if in.LagTimeInSeconds != nil {
		in, out := &in.LagTimeInSeconds, &out.LagTimeInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.TimeDataGuardRoleChanged != nil {
		in, out := &in.TimeDataGuardRoleChanged, &out.TimeDataGuardRoleChanged
		*out = new(string)
		**out = **in
	}
	if in.TimeDisasterRecoveryRoleChanged != nil {
		in, out := &in.TimeDisasterRecoveryRoleChanged, &out.TimeDisasterRecoveryRoleChanged
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalStandbyDBObservation.
func (in *LocalStandbyDBObservation) DeepCopy() *LocalStandbyDBObservation {
	if in == nil {
		return nil
	}
	out := new(LocalStandbyDBObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocalStandbyDBParameters) DeepCopyInto(out *LocalStandbyDBParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocalStandbyDBParameters.
func (in *LocalStandbyDBParameters) DeepCopy() *LocalStandbyDBParameters {
	if in == nil {
		return nil
	}
	out := new(LocalStandbyDBParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LongTermBackupScheduleInitParameters) DeepCopyInto(out *LongTermBackupScheduleInitParameters) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.RepeatCadence != nil {
		in, out := &in.RepeatCadence, &out.RepeatCadence
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriodInDays != nil {
		in, out := &in.RetentionPeriodInDays, &out.RetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.TimeOfBackup != nil {
		in, out := &in.TimeOfBackup, &out.TimeOfBackup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LongTermBackupScheduleInitParameters.
func (in *LongTermBackupScheduleInitParameters) DeepCopy() *LongTermBackupScheduleInitParameters {
	if in == nil {
		return nil
	}
	out := new(LongTermBackupScheduleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LongTermBackupScheduleObservation) DeepCopyInto(out *LongTermBackupScheduleObservation) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.RepeatCadence != nil {
		in, out := &in.RepeatCadence, &out.RepeatCadence
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriodInDays != nil {
		in, out := &in.RetentionPeriodInDays, &out.RetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.TimeOfBackup != nil {
		in, out := &in.TimeOfBackup, &out.TimeOfBackup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LongTermBackupScheduleObservation.
func (in *LongTermBackupScheduleObservation) DeepCopy() *LongTermBackupScheduleObservation {
	if in == nil {
		return nil
	}
	out := new(LongTermBackupScheduleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LongTermBackupScheduleParameters) DeepCopyInto(out *LongTermBackupScheduleParameters) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.RepeatCadence != nil {
		in, out := &in.RepeatCadence, &out.RepeatCadence
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriodInDays != nil {
		in, out := &in.RetentionPeriodInDays, &out.RetentionPeriodInDays
		*out = new(float64)
		**out = **in
	}
	if in.TimeOfBackup != nil {
		in, out := &in.TimeOfBackup, &out.TimeOfBackup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LongTermBackupScheduleParameters.
func (in *LongTermBackupScheduleParameters) DeepCopy() *LongTermBackupScheduleParameters {
	if in == nil {
		return nil
	}
	out := new(LongTermBackupScheduleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProfilesInitParameters) DeepCopyInto(out *ProfilesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProfilesInitParameters.
func (in *ProfilesInitParameters) DeepCopy() *ProfilesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ProfilesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProfilesObservation) DeepCopyInto(out *ProfilesObservation) {
	*out = *in
	if in.ConsumerGroup != nil {
		in, out := &in.ConsumerGroup, &out.ConsumerGroup
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.HostFormat != nil {
		in, out := &in.HostFormat, &out.HostFormat
		*out = new(string)
		**out = **in
	}
	if in.IsRegional != nil {
		in, out := &in.IsRegional, &out.IsRegional
		*out = new(bool)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.SessionMode != nil {
		in, out := &in.SessionMode, &out.SessionMode
		*out = new(string)
		**out = **in
	}
	if in.SyntaxFormat != nil {
		in, out := &in.SyntaxFormat, &out.SyntaxFormat
		*out = new(string)
		**out = **in
	}
	if in.TLSAuthentication != nil {
		in, out := &in.TLSAuthentication, &out.TLSAuthentication
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProfilesObservation.
func (in *ProfilesObservation) DeepCopy() *ProfilesObservation {
	if in == nil {
		return nil
	}
	out := new(ProfilesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProfilesParameters) DeepCopyInto(out *ProfilesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProfilesParameters.
func (in *ProfilesParameters) DeepCopy() *ProfilesParameters {
	if in == nil {
		return nil
	}
	out := new(ProfilesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicConnectionUrlsInitParameters) DeepCopyInto(out *PublicConnectionUrlsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicConnectionUrlsInitParameters.
func (in *PublicConnectionUrlsInitParameters) DeepCopy() *PublicConnectionUrlsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PublicConnectionUrlsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicConnectionUrlsObservation) DeepCopyInto(out *PublicConnectionUrlsObservation) {
	*out = *in
	if in.ApexURL != nil {
		in, out := &in.ApexURL, &out.ApexURL
		*out = new(string)
		**out = **in
	}
	if in.DatabaseTransformsURL != nil {
		in, out := &in.DatabaseTransformsURL, &out.DatabaseTransformsURL
		*out = new(string)
		**out = **in
	}
	if in.GraphStudioURL != nil {
		in, out := &in.GraphStudioURL, &out.GraphStudioURL
		*out = new(string)
		**out = **in
	}
	if in.MachineLearningNotebookURL != nil {
		in, out := &in.MachineLearningNotebookURL, &out.MachineLearningNotebookURL
		*out = new(string)
		**out = **in
	}
	if in.MachineLearningUserManagementURL != nil {
		in, out := &in.MachineLearningUserManagementURL, &out.MachineLearningUserManagementURL
		*out = new(string)
		**out = **in
	}
	if in.MongoDBURL != nil {
		in, out := &in.MongoDBURL, &out.MongoDBURL
		*out = new(string)
		**out = **in
	}
	if in.OrdsURL != nil {
		in, out := &in.OrdsURL, &out.OrdsURL
		*out = new(string)
		**out = **in
	}
	if in.SQLDevWebURL != nil {
		in, out := &in.SQLDevWebURL, &out.SQLDevWebURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicConnectionUrlsObservation.
func (in *PublicConnectionUrlsObservation) DeepCopy() *PublicConnectionUrlsObservation {
	if in == nil {
		return nil
	}
	out := new(PublicConnectionUrlsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicConnectionUrlsParameters) DeepCopyInto(out *PublicConnectionUrlsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicConnectionUrlsParameters.
func (in *PublicConnectionUrlsParameters) DeepCopy() *PublicConnectionUrlsParameters {
	if in == nil {
		return nil
	}
	out := new(PublicConnectionUrlsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteDisasterRecoveryConfigurationInitParameters) DeepCopyInto(out *RemoteDisasterRecoveryConfigurationInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteDisasterRecoveryConfigurationInitParameters.
func (in *RemoteDisasterRecoveryConfigurationInitParameters) DeepCopy() *RemoteDisasterRecoveryConfigurationInitParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteDisasterRecoveryConfigurationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteDisasterRecoveryConfigurationObservation) DeepCopyInto(out *RemoteDisasterRecoveryConfigurationObservation) {
	*out = *in
	if in.DisasterRecoveryType != nil {
		in, out := &in.DisasterRecoveryType, &out.DisasterRecoveryType
		*out = new(string)
		**out = **in
	}
	if in.IsReplicateAutomaticBackups != nil {
		in, out := &in.IsReplicateAutomaticBackups, &out.IsReplicateAutomaticBackups
		*out = new(bool)
		**out = **in
	}
	if in.IsSnapshotStandby != nil {
		in, out := &in.IsSnapshotStandby, &out.IsSnapshotStandby
		*out = new(bool)
		**out = **in
	}
	if in.TimeSnapshotStandbyEnabledTill != nil {
		in, out := &in.TimeSnapshotStandbyEnabledTill, &out.TimeSnapshotStandbyEnabledTill
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteDisasterRecoveryConfigurationObservation.
func (in *RemoteDisasterRecoveryConfigurationObservation) DeepCopy() *RemoteDisasterRecoveryConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(RemoteDisasterRecoveryConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteDisasterRecoveryConfigurationParameters) DeepCopyInto(out *RemoteDisasterRecoveryConfigurationParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteDisasterRecoveryConfigurationParameters.
func (in *RemoteDisasterRecoveryConfigurationParameters) DeepCopy() *RemoteDisasterRecoveryConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(RemoteDisasterRecoveryConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcePoolSummaryInitParameters) DeepCopyInto(out *ResourcePoolSummaryInitParameters) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.PoolSize != nil {
		in, out := &in.PoolSize, &out.PoolSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcePoolSummaryInitParameters.
func (in *ResourcePoolSummaryInitParameters) DeepCopy() *ResourcePoolSummaryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcePoolSummaryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcePoolSummaryObservation) DeepCopyInto(out *ResourcePoolSummaryObservation) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.PoolSize != nil {
		in, out := &in.PoolSize, &out.PoolSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcePoolSummaryObservation.
func (in *ResourcePoolSummaryObservation) DeepCopy() *ResourcePoolSummaryObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcePoolSummaryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcePoolSummaryParameters) DeepCopyInto(out *ResourcePoolSummaryParameters) {
	*out = *in
	if in.IsDisabled != nil {
		in, out := &in.IsDisabled, &out.IsDisabled
		*out = new(bool)
		**out = **in
	}
	if in.PoolSize != nil {
		in, out := &in.PoolSize, &out.PoolSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcePoolSummaryParameters.
func (in *ResourcePoolSummaryParameters) DeepCopy() *ResourcePoolSummaryParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcePoolSummaryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScheduledOperationsInitParameters) DeepCopyInto(out *ScheduledOperationsInitParameters) {
	*out = *in
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = make([]DayOfWeekInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScheduledStartTime != nil {
		in, out := &in.ScheduledStartTime, &out.ScheduledStartTime
		*out = new(string)
		**out = **in
	}
	if in.ScheduledStopTime != nil {
		in, out := &in.ScheduledStopTime, &out.ScheduledStopTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScheduledOperationsInitParameters.
func (in *ScheduledOperationsInitParameters) DeepCopy() *ScheduledOperationsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScheduledOperationsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScheduledOperationsObservation) DeepCopyInto(out *ScheduledOperationsObservation) {
	*out = *in
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = make([]DayOfWeekObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScheduledStartTime != nil {
		in, out := &in.ScheduledStartTime, &out.ScheduledStartTime
		*out = new(string)
		**out = **in
	}
	if in.ScheduledStopTime != nil {
		in, out := &in.ScheduledStopTime, &out.ScheduledStopTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScheduledOperationsObservation.
func (in *ScheduledOperationsObservation) DeepCopy() *ScheduledOperationsObservation {
	if in == nil {
		return nil
	}
	out := new(ScheduledOperationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScheduledOperationsParameters) DeepCopyInto(out *ScheduledOperationsParameters) {
	*out = *in
	if in.DayOfWeek != nil {
		in, out := &in.DayOfWeek, &out.DayOfWeek
		*out = make([]DayOfWeekParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScheduledStartTime != nil {
		in, out := &in.ScheduledStartTime, &out.ScheduledStartTime
		*out = new(string)
		**out = **in
	}
	if in.ScheduledStopTime != nil {
		in, out := &in.ScheduledStopTime, &out.ScheduledStopTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScheduledOperationsParameters.
func (in *ScheduledOperationsParameters) DeepCopy() *ScheduledOperationsParameters {
	if in == nil {
		return nil
	}
	out := new(ScheduledOperationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandbyDBInitParameters) DeepCopyInto(out *StandbyDBInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandbyDBInitParameters.
func (in *StandbyDBInitParameters) DeepCopy() *StandbyDBInitParameters {
	if in == nil {
		return nil
	}
	out := new(StandbyDBInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandbyDBObservation) DeepCopyInto(out *StandbyDBObservation) {
	*out = *in
	if in.AvailabilityDomain != nil {
		in, out := &in.AvailabilityDomain, &out.AvailabilityDomain
		*out = new(string)
		**out = **in
	}
	if in.LagTimeInSeconds != nil {
		in, out := &in.LagTimeInSeconds, &out.LagTimeInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.LifecycleDetails != nil {
		in, out := &in.LifecycleDetails, &out.LifecycleDetails
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.TimeDataGuardRoleChanged != nil {
		in, out := &in.TimeDataGuardRoleChanged, &out.TimeDataGuardRoleChanged
		*out = new(string)
		**out = **in
	}
	if in.TimeDisasterRecoveryRoleChanged != nil {
		in, out := &in.TimeDisasterRecoveryRoleChanged, &out.TimeDisasterRecoveryRoleChanged
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandbyDBObservation.
func (in *StandbyDBObservation) DeepCopy() *StandbyDBObservation {
	if in == nil {
		return nil
	}
	out := new(StandbyDBObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandbyDBParameters) DeepCopyInto(out *StandbyDBParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandbyDBParameters.
func (in *StandbyDBParameters) DeepCopy() *StandbyDBParameters {
	if in == nil {
		return nil
	}
	out := new(StandbyDBParameters)
	in.DeepCopyInto(out)
	return out
}
