// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerCertificateInitParameters struct {

	// The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: example_certificate_bundle
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// The OCID of the load balancer on which to add the certificate bundle.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// The SSL private key for your certificate, in PEM format.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The public certificate, in PEM format, that you received from your SSL certificate provider.
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`
}

type BalancerCertificateObservation struct {

	// The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: example_certificate_bundle
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The OCID of the load balancer on which to add the certificate bundle.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// The public certificate, in PEM format, that you received from your SSL certificate provider.
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BalancerCertificateParameters struct {

	// The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: example_certificate_bundle
	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// The OCID of the load balancer on which to add the certificate bundle.
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// The SSL private key for your certificate, in PEM format.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The public certificate, in PEM format, that you received from your SSL certificate provider.
	// +kubebuilder:validation:Optional
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`
}

// BalancerCertificateSpec defines the desired state of BalancerCertificate
type BalancerCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BalancerCertificateInitParameters `json:"initProvider,omitempty"`
}

// BalancerCertificateStatus defines the observed state of BalancerCertificate.
type BalancerCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BalancerCertificate is the Schema for the BalancerCertificates API. Provides the Certificate resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,provider-oci}
type BalancerCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateName) || (has(self.initProvider) && has(self.initProvider.certificateName))",message="spec.forProvider.certificateName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadBalancerId) || (has(self.initProvider) && has(self.initProvider.loadBalancerId))",message="spec.forProvider.loadBalancerId is a required parameter"
	Spec   BalancerCertificateSpec   `json:"spec"`
	Status BalancerCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerCertificateList contains a list of BalancerCertificates
type BalancerCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerCertificate `json:"items"`
}

// Repository type metadata.
var (
	BalancerCertificate_Kind             = "BalancerCertificate"
	BalancerCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerCertificate_Kind}.String()
	BalancerCertificate_KindAPIVersion   = BalancerCertificate_Kind + "." + CRDGroupVersion.String()
	BalancerCertificate_GroupVersionKind = CRDGroupVersion.WithKind(BalancerCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerCertificate{}, &BalancerCertificateList{})
}
