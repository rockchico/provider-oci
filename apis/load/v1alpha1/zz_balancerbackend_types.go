// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerBackendInitParameters struct {

	// The name of the backend set to add the backend server to.  Example: example_backend_set
	BackendsetName *string `json:"backendsetName,omitempty" tf:"backendset_name,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as a backup unit. If true, the load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "backup" fail the health check policy.
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// (Updatable) Whether the load balancer should drain this server. Servers marked "drain" receive no new incoming traffic.  Example: false
	Drain *bool `json:"drain,omitempty" tf:"drain,omitempty"`

	// The IP address of the backend server.  Example: 10.0.0.3
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The OCID of the load balancer associated with the backend set and servers.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// (Updatable) The maximum number of simultaneous connections the load balancer can make to the backend. If this is not set then number of simultaneous connections the load balancer can make to the backend is unlimited.  Example: 300
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: false
	Offline *bool `json:"offline,omitempty" tf:"offline,omitempty"`

	// The communication port for the backend server.  Example: 8080
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Updatable) The load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives 3 times the number of new connections as a server weighted '1'. For more information on load balancing policies, see How Load Balancing Policies Work.  Example: 3
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BalancerBackendObservation struct {

	// The name of the backend set to add the backend server to.  Example: example_backend_set
	BackendsetName *string `json:"backendsetName,omitempty" tf:"backendset_name,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as a backup unit. If true, the load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "backup" fail the health check policy.
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// (Updatable) Whether the load balancer should drain this server. Servers marked "drain" receive no new incoming traffic.  Example: false
	Drain *bool `json:"drain,omitempty" tf:"drain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address of the backend server.  Example: 10.0.0.3
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The OCID of the load balancer associated with the backend set and servers.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// (Updatable) The maximum number of simultaneous connections the load balancer can make to the backend. If this is not set then number of simultaneous connections the load balancer can make to the backend is unlimited.  Example: 300
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// A read-only field showing the IP address and port that uniquely identify this backend server in the backend set.  Example: 10.0.0.3:8080
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: false
	Offline *bool `json:"offline,omitempty" tf:"offline,omitempty"`

	// The communication port for the backend server.  Example: 8080
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Updatable) The load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives 3 times the number of new connections as a server weighted '1'. For more information on load balancing policies, see How Load Balancing Policies Work.  Example: 3
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BalancerBackendParameters struct {

	// The name of the backend set to add the backend server to.  Example: example_backend_set
	// +kubebuilder:validation:Optional
	BackendsetName *string `json:"backendsetName,omitempty" tf:"backendset_name,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as a backup unit. If true, the load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "backup" fail the health check policy.
	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// (Updatable) Whether the load balancer should drain this server. Servers marked "drain" receive no new incoming traffic.  Example: false
	// +kubebuilder:validation:Optional
	Drain *bool `json:"drain,omitempty" tf:"drain,omitempty"`

	// The IP address of the backend server.  Example: 10.0.0.3
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The OCID of the load balancer associated with the backend set and servers.
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// (Updatable) The maximum number of simultaneous connections the load balancer can make to the backend. If this is not set then number of simultaneous connections the load balancer can make to the backend is unlimited.  Example: 300
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// (Updatable) Whether the load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: false
	// +kubebuilder:validation:Optional
	Offline *bool `json:"offline,omitempty" tf:"offline,omitempty"`

	// The communication port for the backend server.  Example: 8080
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Updatable) The load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives 3 times the number of new connections as a server weighted '1'. For more information on load balancing policies, see How Load Balancing Policies Work.  Example: 3
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// BalancerBackendSpec defines the desired state of BalancerBackend
type BalancerBackendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerBackendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BalancerBackendInitParameters `json:"initProvider,omitempty"`
}

// BalancerBackendStatus defines the observed state of BalancerBackend.
type BalancerBackendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerBackendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BalancerBackend is the Schema for the BalancerBackends API. Provides the Backend resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,provider-oci}
type BalancerBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendsetName) || (has(self.initProvider) && has(self.initProvider.backendsetName))",message="spec.forProvider.backendsetName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipAddress) || (has(self.initProvider) && has(self.initProvider.ipAddress))",message="spec.forProvider.ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadBalancerId) || (has(self.initProvider) && has(self.initProvider.loadBalancerId))",message="spec.forProvider.loadBalancerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	Spec   BalancerBackendSpec   `json:"spec"`
	Status BalancerBackendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerBackendList contains a list of BalancerBackends
type BalancerBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerBackend `json:"items"`
}

// Repository type metadata.
var (
	BalancerBackend_Kind             = "BalancerBackend"
	BalancerBackend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerBackend_Kind}.String()
	BalancerBackend_KindAPIVersion   = BalancerBackend_Kind + "." + CRDGroupVersion.String()
	BalancerBackend_GroupVersionKind = CRDGroupVersion.WithKind(BalancerBackend_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerBackend{}, &BalancerBackendList{})
}
