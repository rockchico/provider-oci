//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Alarm) DeepCopyInto(out *Alarm) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Alarm.
func (in *Alarm) DeepCopy() *Alarm {
	if in == nil {
		return nil
	}
	out := new(Alarm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Alarm) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmInitParameters) DeepCopyInto(out *AlarmInitParameters) {
	*out = *in
	if in.AlarmSummary != nil {
		in, out := &in.AlarmSummary, &out.AlarmSummary
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Destinations != nil {
		in, out := &in.Destinations, &out.Destinations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EvaluationSlackDuration != nil {
		in, out := &in.EvaluationSlackDuration, &out.EvaluationSlackDuration
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsNotificationsPerMetricDimensionEnabled != nil {
		in, out := &in.IsNotificationsPerMetricDimensionEnabled, &out.IsNotificationsPerMetricDimensionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentID != nil {
		in, out := &in.MetricCompartmentID, &out.MetricCompartmentID
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentIDInSubtree != nil {
		in, out := &in.MetricCompartmentIDInSubtree, &out.MetricCompartmentIDInSubtree
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NotificationTitle != nil {
		in, out := &in.NotificationTitle, &out.NotificationTitle
		*out = new(string)
		**out = **in
	}
	if in.NotificationVersion != nil {
		in, out := &in.NotificationVersion, &out.NotificationVersion
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RepeatNotificationDuration != nil {
		in, out := &in.RepeatNotificationDuration, &out.RepeatNotificationDuration
		*out = new(string)
		**out = **in
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Suppression != nil {
		in, out := &in.Suppression, &out.Suppression
		*out = make([]SuppressionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmInitParameters.
func (in *AlarmInitParameters) DeepCopy() *AlarmInitParameters {
	if in == nil {
		return nil
	}
	out := new(AlarmInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmList) DeepCopyInto(out *AlarmList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Alarm, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmList.
func (in *AlarmList) DeepCopy() *AlarmList {
	if in == nil {
		return nil
	}
	out := new(AlarmList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AlarmList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmObservation) DeepCopyInto(out *AlarmObservation) {
	*out = *in
	if in.AlarmSummary != nil {
		in, out := &in.AlarmSummary, &out.AlarmSummary
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Destinations != nil {
		in, out := &in.Destinations, &out.Destinations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EvaluationSlackDuration != nil {
		in, out := &in.EvaluationSlackDuration, &out.EvaluationSlackDuration
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsNotificationsPerMetricDimensionEnabled != nil {
		in, out := &in.IsNotificationsPerMetricDimensionEnabled, &out.IsNotificationsPerMetricDimensionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentID != nil {
		in, out := &in.MetricCompartmentID, &out.MetricCompartmentID
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentIDInSubtree != nil {
		in, out := &in.MetricCompartmentIDInSubtree, &out.MetricCompartmentIDInSubtree
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NotificationTitle != nil {
		in, out := &in.NotificationTitle, &out.NotificationTitle
		*out = new(string)
		**out = **in
	}
	if in.NotificationVersion != nil {
		in, out := &in.NotificationVersion, &out.NotificationVersion
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RepeatNotificationDuration != nil {
		in, out := &in.RepeatNotificationDuration, &out.RepeatNotificationDuration
		*out = new(string)
		**out = **in
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Suppression != nil {
		in, out := &in.Suppression, &out.Suppression
		*out = make([]SuppressionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TimeCreated != nil {
		in, out := &in.TimeCreated, &out.TimeCreated
		*out = new(string)
		**out = **in
	}
	if in.TimeUpdated != nil {
		in, out := &in.TimeUpdated, &out.TimeUpdated
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmObservation.
func (in *AlarmObservation) DeepCopy() *AlarmObservation {
	if in == nil {
		return nil
	}
	out := new(AlarmObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmParameters) DeepCopyInto(out *AlarmParameters) {
	*out = *in
	if in.AlarmSummary != nil {
		in, out := &in.AlarmSummary, &out.AlarmSummary
		*out = new(string)
		**out = **in
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompartmentID != nil {
		in, out := &in.CompartmentID, &out.CompartmentID
		*out = new(string)
		**out = **in
	}
	if in.DefinedTags != nil {
		in, out := &in.DefinedTags, &out.DefinedTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Destinations != nil {
		in, out := &in.Destinations, &out.Destinations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EvaluationSlackDuration != nil {
		in, out := &in.EvaluationSlackDuration, &out.EvaluationSlackDuration
		*out = new(string)
		**out = **in
	}
	if in.FreeformTags != nil {
		in, out := &in.FreeformTags, &out.FreeformTags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsEnabled != nil {
		in, out := &in.IsEnabled, &out.IsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsNotificationsPerMetricDimensionEnabled != nil {
		in, out := &in.IsNotificationsPerMetricDimensionEnabled, &out.IsNotificationsPerMetricDimensionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentID != nil {
		in, out := &in.MetricCompartmentID, &out.MetricCompartmentID
		*out = new(string)
		**out = **in
	}
	if in.MetricCompartmentIDInSubtree != nil {
		in, out := &in.MetricCompartmentIDInSubtree, &out.MetricCompartmentIDInSubtree
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NotificationTitle != nil {
		in, out := &in.NotificationTitle, &out.NotificationTitle
		*out = new(string)
		**out = **in
	}
	if in.NotificationVersion != nil {
		in, out := &in.NotificationVersion, &out.NotificationVersion
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RepeatNotificationDuration != nil {
		in, out := &in.RepeatNotificationDuration, &out.RepeatNotificationDuration
		*out = new(string)
		**out = **in
	}
	if in.Resolution != nil {
		in, out := &in.Resolution, &out.Resolution
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroup != nil {
		in, out := &in.ResourceGroup, &out.ResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
	if in.Suppression != nil {
		in, out := &in.Suppression, &out.Suppression
		*out = make([]SuppressionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmParameters.
func (in *AlarmParameters) DeepCopy() *AlarmParameters {
	if in == nil {
		return nil
	}
	out := new(AlarmParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmSpec) DeepCopyInto(out *AlarmSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmSpec.
func (in *AlarmSpec) DeepCopy() *AlarmSpec {
	if in == nil {
		return nil
	}
	out := new(AlarmSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlarmStatus) DeepCopyInto(out *AlarmStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlarmStatus.
func (in *AlarmStatus) DeepCopy() *AlarmStatus {
	if in == nil {
		return nil
	}
	out := new(AlarmStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesInitParameters) DeepCopyInto(out *OverridesInitParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesInitParameters.
func (in *OverridesInitParameters) DeepCopy() *OverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesObservation) DeepCopyInto(out *OverridesObservation) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesObservation.
func (in *OverridesObservation) DeepCopy() *OverridesObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesParameters) DeepCopyInto(out *OverridesParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.PendingDuration != nil {
		in, out := &in.PendingDuration, &out.PendingDuration
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.RuleName != nil {
		in, out := &in.RuleName, &out.RuleName
		*out = new(string)
		**out = **in
	}
	if in.Severity != nil {
		in, out := &in.Severity, &out.Severity
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesParameters.
func (in *OverridesParameters) DeepCopy() *OverridesParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SuppressionInitParameters) DeepCopyInto(out *SuppressionInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressFrom != nil {
		in, out := &in.TimeSuppressFrom, &out.TimeSuppressFrom
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressUntil != nil {
		in, out := &in.TimeSuppressUntil, &out.TimeSuppressUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SuppressionInitParameters.
func (in *SuppressionInitParameters) DeepCopy() *SuppressionInitParameters {
	if in == nil {
		return nil
	}
	out := new(SuppressionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SuppressionObservation) DeepCopyInto(out *SuppressionObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressFrom != nil {
		in, out := &in.TimeSuppressFrom, &out.TimeSuppressFrom
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressUntil != nil {
		in, out := &in.TimeSuppressUntil, &out.TimeSuppressUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SuppressionObservation.
func (in *SuppressionObservation) DeepCopy() *SuppressionObservation {
	if in == nil {
		return nil
	}
	out := new(SuppressionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SuppressionParameters) DeepCopyInto(out *SuppressionParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressFrom != nil {
		in, out := &in.TimeSuppressFrom, &out.TimeSuppressFrom
		*out = new(string)
		**out = **in
	}
	if in.TimeSuppressUntil != nil {
		in, out := &in.TimeSuppressUntil, &out.TimeSuppressUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SuppressionParameters.
func (in *SuppressionParameters) DeepCopy() *SuppressionParameters {
	if in == nil {
		return nil
	}
	out := new(SuppressionParameters)
	in.DeepCopyInto(out)
	return out
}
