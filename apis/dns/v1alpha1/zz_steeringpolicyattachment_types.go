// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SteeringPolicyAttachmentInitParameters struct {

	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The attached domain within the attached zone. domain_name is case insensitive.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The OCID of the attached steering policy.
	SteeringPolicyID *string `json:"steeringPolicyId,omitempty" tf:"steering_policy_id,omitempty"`

	// The OCID of the attached zone.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type SteeringPolicyAttachmentObservation struct {

	// The OCID of the compartment containing the steering policy attachment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The attached domain within the attached zone. domain_name is case insensitive.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The OCID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes []*string `json:"rtypes,omitempty" tf:"rtypes,omitempty"`

	// The canonical absolute URL of the resource.
	Self *string `json:"self,omitempty" tf:"self,omitempty"`

	// The current state of the resource.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The OCID of the attached steering policy.
	SteeringPolicyID *string `json:"steeringPolicyId,omitempty" tf:"steering_policy_id,omitempty"`

	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The OCID of the attached zone.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type SteeringPolicyAttachmentParameters struct {

	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The attached domain within the attached zone. domain_name is case insensitive.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The OCID of the attached steering policy.
	// +kubebuilder:validation:Optional
	SteeringPolicyID *string `json:"steeringPolicyId,omitempty" tf:"steering_policy_id,omitempty"`

	// The OCID of the attached zone.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// SteeringPolicyAttachmentSpec defines the desired state of SteeringPolicyAttachment
type SteeringPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SteeringPolicyAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SteeringPolicyAttachmentInitParameters `json:"initProvider,omitempty"`
}

// SteeringPolicyAttachmentStatus defines the observed state of SteeringPolicyAttachment.
type SteeringPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SteeringPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SteeringPolicyAttachment is the Schema for the SteeringPolicyAttachments API. Provides the Steering Policy Attachment resource in Oracle Cloud Infrastructure DNS service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,provider-oci}
type SteeringPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainName) || (has(self.initProvider) && has(self.initProvider.domainName))",message="spec.forProvider.domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.steeringPolicyId) || (has(self.initProvider) && has(self.initProvider.steeringPolicyId))",message="spec.forProvider.steeringPolicyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   SteeringPolicyAttachmentSpec   `json:"spec"`
	Status SteeringPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SteeringPolicyAttachmentList contains a list of SteeringPolicyAttachments
type SteeringPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SteeringPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	SteeringPolicyAttachment_Kind             = "SteeringPolicyAttachment"
	SteeringPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SteeringPolicyAttachment_Kind}.String()
	SteeringPolicyAttachment_KindAPIVersion   = SteeringPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	SteeringPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(SteeringPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&SteeringPolicyAttachment{}, &SteeringPolicyAttachmentList{})
}
